#!/bin/bash
## functions
## - functions for shed
## version 0.0.4 - post integration
##################################################
test-message() { { local caller ; caller="${1}" ; local message ; message=${@:2} ; }
 cat << EOF

${message}

EOF
 ${caller}-help
 error "false" # hide error
 false
}
#-------------------------------------------------
member-id-escaped() {
  {
    echo ${member_id}
  } | sed-escape-member-id
}
#-------------------------------------------------
test-member-id() { { local caller ; caller="${1}" ; local member_id ; member_id="${2}" ; }
 test "${member_id}" || { test-message ${caller} "member id not specified" ; }
 test "${member_id:0:1}" = "U" || { test-message ${caller} "member id invalid" ; }
 # else ok
}
#-------------------------------------------------
strip-double-quotes() {
  {
    echo ${@} \
    | sed -e 's/"//g'
  }
}
#--------------------------------------------------
# version 0.0.2 - using double quotes
date-today() {
 date "+%Y-%m-%d"
}
#-------------------------------------------------
list-users-payload() { 
 slack-users-list
}
list-users() { 
 local candidate_key
 candidate_key=${cache}/temp-${FUNCNAME}
 cache \
 ${candidate_key} \
 ${FUNCNAME}-payload
}
#-------------------------------------------------
# version 0.0.2 - csv,text synonyms
list-channels() { { local output ; output=${1-csv} ; }
 case ${output} in
  json) {
   get-channels
  } ;;
  csv) {
   get-channels-csv
  } ;;
  text) {
   get-channels-csv
  } ;;
  text-names|names) {
   get-channel-names
  } ;;
  text-ids|ids) {
   get-channel-ids
  } ;;
  *) {
   error "unsupported output '${output}'" "" ""
   false
  } ;;
 esac
}
#-------------------------------------------------
# version 0.0.3 - case all cecho starting
setup-channel-ids() {
 cecho green in ${FUNCNAME}
 test ! "${channel_ids}" = "all" || {
  cecho green getting all channel ids..
  channel_ids=$( 
   get-channel-ids | sed-strip-double-quotes
  )
 }
 cecho yellow channel_ids: ${channel_ids}
}
#-------------------------------------------------
get-user-id-payload() { 
 list-users | jq "
.members[]|
if ..|.${candidate_field}? == \"${candidate_value}\"
then
.id
else
empty
end
"
}
get-user-id-test() { 
 test "${candidate_field}" # error handler not yet implemented
 test "${candidate_value}" # error handler not yet implemented
}
get-user-id() { { local candidate_field ; candidate_field="${1}" ; local candidate_value ; candidate_value="${@:2}" ; }
 ${FUNCNAME}-test
 ${FUNCNAME}-payload | sort | uniq
}
#-------------------------------------------------
slack-shed-start-date() { 
 slack-shed-date-oldest ${@}
}
#-------------------------------------------------
slack-shed-date-oldest-test() {
 test "${date_oldest}"  &&
 date --date="${date_oldest}" &>/dev/null &&
 true
}
#-------------------------------------------------
# slack-shed-date-oldest
# - returns message since date specified
# version 0.0.2 - for-each-channel inheriting context
#-------------------------------------------------
slack-shed-date-oldest() { { local date_oldest ; date_oldest="${1}" ; local channel_ids ; channel_ids=${@:2} ; { test "${channel_ids}" || { channel_ids="all" ; } ; } ; }
  {
    ${FUNCNAME}-test || { 
      slack-shed-help 
      { error false ; false ; }
    }
  }
  {
    for-each-channel #${date_oldest}
  } #2>/dev/null
}
#-------------------------------------------------
slack-shed-env-test-case-initial() {
 test "$( dirname ${0} )" = "."
}
#-------------------------------------------------
slack-shed-env-payload() {
 cat << EOF
alias shed='bash ${dirname}/shed.sh'
alias shed-debug='bash -v -x ${dirname}/shed.sh'
EOF
}
#-------------------------------------------------
# version 0.0.3 - using test, payload
slack-shed-env() {
 local dirname
 ${FUNCNAME}-test-case-initial && {
  dirname=$( pwd $( dirname ${0} ) )
 true
 } || {
  dirname=$( dirname ${0} )
 }
 ${FUNCNAME}-payload
}
##################################################
## generated by create-stub2.sh v0.1.1
## on Sun, 06 May 2018 19:52:18 +0900
## see <https://github.com/temptemp3/sh2>
##################################################
